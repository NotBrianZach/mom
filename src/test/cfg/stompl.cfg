# =========================================================================
# General Settings
# =========================================================================
Broker {
  # The name of the broker
  # used for logging and as Stomp server name
  name = "Test/0.1"

  # Supported Stomp versions
  # The first one is the preferred version
  versions = "1.1, 1.0"

  # server heart beat
  # first value : what we send
  # second value: what we receive
  heartbeat = "500,500"

  # Bind address, host
  # May be a host name, an IP address or empty; 
  # in the latter case, the broker will accept
  # connection requests from any interface.
  host = "localhost" # better use a list and "select"

  # Bind address, port
  port = 61618

  # Users allowed to connect
  users = ["guest"]

  # Pending connections
  sockets = 32

  # Max connections, 
  # 0 = infinity
  connections = 1024

  # Max packet size, packetsize * 10 = max message size
  # 0 = infinity
  packetsize = 1024 # 1024 1M 0 (= infinite)

  # not yet supported
  protocols = "stomp,jms,amqp"
  identify = "header" # guess or header
}

# =========================================================================
# Queue-specific Settings
# =========================================================================
Queues {
  # brokers may deal with many queues
  # we create a new thread every n queues
  qsPerThread = 100

  # a queue may have many subscriptions;
  # subscriptions may be handled in parallel
  # if more than one CPU is currently available
  parallel = on

  # max number of CPUs available to parallel processing of subscriptions
  # a reasonable value is the number of CPUs in the system - 1
  cpus     = 2

  # an attempt to resend messages is made every n milliseconds
  # If ommitted, 5 milliseconds
  resend   = 5 # ms

  # Communication pattern; 'many' or 'one'
  # by default queues are 'many', 
  # i.e. a message is sent to all current subscriptions;
  # in a queue with pattern 'one',  
  # messages are sent to the first subscription
  # that is currently available; 
  # if sending to this subscription fails,
  # the next subscription moves up to the first position
  one  = "none but '/q/%'"

  # Queues, for which messages are stored in a database;
  # If ommitted, messages are never stored.
  store = "none but ['/q/main', '/q/x', '/q/y']"

  # Queues, from which messages are never removed
  persistent = "none but '/q/p/%'"

  # Allow sending to queues that have not yet been created
  # (because they are not persistent and there was not yet a subscription)
  # This parameter is set by default.
  dynamic = on
}

# =========================================================================
# User Settings
# =========================================================================
Users {
  # Users, for which an entry in the password file is needed.
  # If ommitted, all users need a password.
  authenticate = "all but ['guest']"

  # Setting of a specific user
  guest {
    # connections allowed for this user;
    # overrides the general setting in the 'broker' section
    connections = 1

    # max packet size allowed for this user;
    # overrides the general setting in the 'broker' section
    packetsize  = 256

    # user may send to the specified queues;
    # if ommitted, the user may not send to any queue!
    sendTo    = "none but '/q/ping'"

    # user may subscribe to the specified queues;
    # if ommitted, the user may not subscribe to any queue!
    subscribe = "all but '/q/%'"

    # user may send to the queues that do not yet exist;
    # if ommitted, the user may not send to queue that do not yet exist!
    dynamic   = on
  }
}

# =========================================================================
# Logging Settings
# =========================================================================
Logging {
  # Logger type: stdout, stderr, file or server
  # stdout: Log messages are written to stdout
  # stderr: Log messages are written to stderr
  # file  : Log messages are written to a file
  # server: Log messages are sent to a log server
  type = "stdout"

  # Logger format: native or log4j
  # 'native' is a human-readable text-based format
  # 'log4j'  is an XML format compatible with log4j readers
  #          Log levels are converted to log4j log priorities
  format = "native" # log4j

  # File, to which the file logger writes
  file = "test/log/stompl2.log"

  # Log Server, hostname or host address
  host = "127.0.0.1"

  # Log Server, port
  port = 7711

  # ======================================================================
  # Log Level:
  # ======================================================================
  # DEBUG    : Message-level events;
  #            log4j: DEBUG 
  # INFO     : Connection-level events (default)
  #            log4j: INFO
  # NOTICE   : Potentially erroneous events 
  #            that do not effect the proper functioning of the broker
  #            (e.g. peer closed connection)
  #            log4j: INFO
  # WARNING  : Session anomalities that may be related to 
  #            broker malfunctions (e.g. exception)
  #            log4j: WARN
  # ERROR    : Anomalities that are related to broker malfunctions 
  #            (e.g. socket exception)
  #            log4j: ERROR
  # CRITICAL : Broker malfunction (e.g. a single sender process has failed)
  #            log4j: ERROR
  # ALERT    : Immediate action is needed or the broker will be unusable 
  #            (e.g. out of memory)
  #            log4j: ERROR
  # EMERGENCY: The broker is not usable anymore 
  #            (e.g. all sender processes have failed)
  #            log4j: FATAL
  # ======================================================================
  level = "INFO"
  # ======================================================================
}
